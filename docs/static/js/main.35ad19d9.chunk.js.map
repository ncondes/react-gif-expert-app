{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prevCategories","type","placeholder","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAiBA,OACE,sBAAMC,SAXa,SAAAC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAe,SAAAS,GAAc,OAAMP,GAAN,mBAAqBO,OAClDN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,YAAY,2BACZC,MAAQV,EACRW,SApBoB,SAAAR,GAAC,OAAIF,EAAeE,EAAES,OAAOF,a,QCP5CG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEvC,OACE,sBAAKC,UAAU,2CAAf,UACE,qBACEC,IAAMF,EACNG,IAAMJ,IAER,4BAAKA,Q,uBCVEK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfN,EAFe,iDAEkCO,UAAWF,GAF7C,+DAGFG,MAAOR,GAHL,cAGfS,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MAEXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXjB,kBAiBdY,GAjBc,4CAAH,sDCGPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAExB,ECF0B,SAAEA,GAE5B,MAA0BtB,mBAAS,CACjC4B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAfAC,qBAAW,WAETjB,EAASC,GACNiB,MAAM,SAAAC,GAELC,YAAW,WACTJ,EAAS,CACPT,KAAMY,EACNL,SAAS,MAEV,WAGN,CAAEb,IAEEc,EDxB2BM,CAAcpB,GAAlCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIjB,UAAU,oCAAd,yBAA4DI,EAA5D,YAEEa,GAAW,mBAAGjB,UAAU,2CAAb,wBAEb,qBAAKA,UAAU,YAAf,SACIc,EAAOF,KAAK,SAAAC,GAAG,OACf,cAAC,EAAD,eAEOA,GADCA,EAAIhB,aEXT4B,EAAe,WAE1B,IACA,EAAsC3C,mBADZ,CAAE,iBAC5B,mBAAQ4C,EAAR,KAAoB7C,EAApB,KAEA,OACE,qCACE,gDACA,cAAC,EAAD,CACEA,cAAgBA,IAElB,uBAEE6C,EAAWd,KAAK,SAAAR,GAAQ,OACxB,cAAC,EAAD,CACEA,SAAWA,GACLA,MAIV,mBAAGJ,UAAU,SAAb,wC,MCpBN2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.35ad19d9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [ inputValue, setInputValue ] = useState('');\n\n  // handleInputChange\n  const handleInputChange = e => setInputValue( e.target.value );\n  \n\n  // handleSubmit\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2 ) {\n      // para no tener que recibir la prop de category, podemos usar una funcion flecha para recibir el valor previo que se tenia de estado en categories.\n      setCategories( prevCategories => [ inputValue, ...prevCategories ] );\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input\n        type='text'\n        placeholder='Example: Los Simpsons...'\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\n","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n  return (\n    <div className='card animate__animated animate__fadeInUp'>\n      <img \n        src={ url }\n        alt={ title }\n      />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","export const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=wX9iI032XuGayYX75yxgGMealZha5skn`;\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      // ? si se tienen imagenes entonces obtengalas\n      url: img.images?.downsized_medium.url,\n    }\n  })\n\n  // En este archivo no se tiene acceso a setImages entonces solo retornamos gif ( Promesa que resuelve la coleccion de mis imagenes )\n  // setImages( gifs );\n  return gifs;\n\n};","import { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{`----- ${category} -----`}</h3>\n\n      { loading && <p className='loading animate__animated animate__flash'>Loading...</p>}\n\n      <div className='card-grid'>\n        { images.map( img => (\n          <GifGridItem\n            key={ img.id }\n            { ...img }\n          />\n        ))}\n      </div>\n    </>\n  )\n}\n\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  // useEfect hace que la funcion getGifts la cual hace una peticion a una API, solo se haga una vez estableciendo la lista de dependencias ( poniendo los [] )\n\n  // si la categoria llegara a cambiar, use effect no se volveria a reenderizar, pues se establecio [] para que se cargue una unica vez, pero para que useEffect vuelve a realizar un cambio cuando cambia el estado de categories basta con poner como lista de dependencia [ category ] pues es lo que estamos recibiendo como props\n\n  useEffect( () => {\n\n    getGifs( category )\n      .then( imgs => {\n        // setTimeout para simular una carga mas lenta\n        setTimeout(() => {\n          setState({\n            data: imgs,\n            loading: false,\n          })\n        }, 1500);\n      })\n\n  }, [ category ])\n\n  return state;\n\n\n}\n","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n\n  const defaultCategories = [ 'Los Simpsons' ];\n  const [ categories, setCategories ] = useState( defaultCategories );\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory\n        setCategories={ setCategories }\n      />\n      <hr />\n\n      { categories.map( category => (\n        <GifGrid\n          category={ category }\n          key={ category }\n        />\n      ))}\n\n      <p className='author'>Coded by Nicolas Conde</p>\n\n\n    </>\n  )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}